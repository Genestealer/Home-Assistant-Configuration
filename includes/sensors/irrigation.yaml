############################################################
#
# Irrigation Sensors
# https://community.home-assistant.io/t/hass-sprinkler/1903/30?u=richard.huish
#
############################################################

 - platform: template
   sensors:
    pot_irrigation_duration:
      friendly_name: 'Pot Water Duration'
      entity_id: input_slider.pot_irrigation_duration
      value_template: '00:{{states.input_slider.pot_irrigation_duration.state | round(0)}}'


    pot_irrigation_last_run:
       friendly_name: 'Pots Last Watered'
       entity_id: switch.pot_irrigation
       value_template: "{{states.switch.pot_irrigation.last_changed.strftime('%a')}}, {{states.switch.pot_irrigation.last_changed.strftime('%d-%m-%Y')}}"




    lawn_irrigation_duration:
      friendly_name: 'Lawn Water Duration'
      entity_id: input_slider.pot_irrigation_duration
      value_template: '00:{{states.input_slider.lawn_irrigation_duration.state | round(0)}}'


    lawn_irrigation_last_run:
       friendly_name: 'Lawn Last Watered'
       entity_id: switch.pot_irrigation
       value_template: "{{states.switch.lawn_irrigation.last_changed.strftime('%a')}}, {{states.switch.lawn_irrigation.last_changed.strftime('%d-%m-%Y')}}"


    # pot_irrigation_schedule:
    #   friendly_name: 'Pot Water Schedule'
    #   entity_id: input_select.valve_1_schedule
    #   value_template: "{{ states.input_select.valve_1_schedule.state }}"

#   pot_irrigation_next_run:
#      friendly_name: 'Pots next Water'
#      entity_id:
#        - input_slider.valve_1_hour
#        - input_slider.valve_1_minutes
#        - input_select.valve_1_schedule
#        - switch.valve_1
#      value_template: >
#         {# runDay set to 9 = Not Set #}
#         {% set runDay = 9 |int %}
#         {# Set todays day #}
#         {% set currentDay = now.weekday() |int %}
#         {%- macro monthu() -%}
#             {%- if currentDay == 0 -%}
#                 {{0}}
#             {%- elif  currentDay <= 3 -%}
#                 {{3}}
#             {%- else -%}
#                 {{0}}
#             {%- endif -%}
#         {%- endmacro -%}
#         {%- macro monwedfrisun() -%}
#             {%- if currentDay == 0 -%}
#                 {{0}}
#             {%- elif  currentDay <= 2 -%}
#                 {{2}}
#             {%- elif  currentDay <= 4 -%}
#                 {{4}}
#             {%- elif  currentDay <= 6 -%}
#                 {{6}}
#             {%- endif -%}
#         {%- endmacro -%}
#         {# set configured runDay from input_select #}
#         {% if states.input_select.valve_1_schedule.state == "Monday" %}
#             {% set runDay = 0 |int %}
#         {% elif states.input_select.valve_1_schedule.state == "Tuesday" %}
#             {% set runDay = 1 |int %}
#         {% elif states.input_select.valve_1_schedule.state == "Wednesday" %}
#             {% set runDay = 2 |int %}
#         {% elif states.input_select.valve_1_schedule.state == "Thursday" %}
#             {% set runDay = 3 |int %}
#         {% elif states.input_select.valve_1_schedule.state == "Friday" %}
#             {% set runDay = 4 |int %}
#         {% elif states.input_select.valve_1_schedule.state == "Saturday" %}
#             {% set runDay = 5 |int %}
#         {% elif states.input_select.valve_1_schedule.state == "Sunday" %}
#             {% set runDay = 6 |int %}
#         {% elif states.input_select.valve_1_schedule.state == "Mon/Thu" %}
#             {% set runDay = monthu() |int -%}
#         {% elif states.input_select.valve_1_schedule.state == "Mon/Wed/Fri/Sun" %}
#             {% set runDay = monwedfrisun() |int %}
#         {% elif states.input_select.valve_1_schedule.state == "Every Day" %}
#             {% set runDay = currentDay |int %}
#         {% endif %}
#         {# determine the next runday #}
#         {% if runDay == 9 %}
#             {# schedule not active #}
#             {% set runDate = "Not set" %}
#         {% else %}
#             {# schedule is active so determine next run #}
#             {# first check if runDay = today #}
#             {% if currentDay == runDay %}
#                 {# are we passed the scheduled time? #}
#                 {% if states.sensor.starttime_valve_1.state < now.time().strftime("%H:%M") %}
#                     {# than we need to fake tomorrow #}
#                     {% set currentDay = (currentDay + 1) |int %}
#                     {# and calculate new runDay in case we have a list of multiple run days in in a week #}
#                     {% if states.input_select.valve_1_schedule.state == "Mon/Thu" %}
#                         {% set runDay = monthu() |int -%}
#                     {% elif states.input_select.valve_1_schedule.state == "Mon/Wed/Fri/Sun" %}
#                         {% set runDay = monwedfrisun() |int %}
#                     {% elif states.input_select.valve_1_schedule.state == "Every Day" %}
#                         {% set runDay = currentDay |int %}
#                     {% endif %}
#                 {% endif %}
#             {% endif %}
#             {# Now we can determine next runDate base on now.weekday() and not currentDay as that can be set to fake tomorrow #}
#             {% if currentDay <= runDay %}
#                 {% set Days = runDay - now.weekday() |int %}
#             {% else %}
#                 {% set Days = runDay + 7 - now.weekday() |int %}
#             {% endif %}
#             {% set runDate = ((as_timestamp(now) + (86400 * Days)) | timestamp_local) %}
#             {# we also want to show the weekday of the next date #}
#             {% set weekdayList = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] %}
#             {% if now.weekday()+ Days < 7 %}
#                 {% set weekday = weekdayList[(now.weekday()+ Days)] %}
#             {% else %}
#                 {% set weekday = weekdayList[(now.weekday()+ Days)- 7] %}
#             {% endif %}
#         {% endif %}
#         {# all done #}
#         {# set states.sensor.next_run_date_valve_1.state = runDate #}
#         {% if runDay == 9 %}
#             {# schedule not active #}
#             {{runDate}}
#         {% else %}
#             {{weekday}}, {{runDate[8:10]}}-{{runDate[5:7]}}-{{runDate[0:4]}} at {{states.sensor.starttime_valve_1.state}}
#         {% endif %}


# #### input_select
# valve_1_schedule:
#   name: Schedule
#   options:
#   - None - Close Valve
#   - Run Now
#   - Every Day
#   - Mon/Wed/Fri/Sun
#   - Mon/Thu
#   - Monday
#   - Tuesday
#   - Wednesday
#   - Thursday
#   - Friday
#   - Saturday
#   - Sunday
#   initial: None - Close Valve
#   icon: mdi:calendar

# #### groups
#   valve_1_status:
#   name: Valve 1
#   icon: mdi:water-pump
#   entities:
#     - sensor.status_valve_1
#     - sensor.last_run_valve_1
#     - sensor.next_run_valve_1
#     - sensor.schedule_valve_1
#     - sensor.starttime_valve_1
#     - sensor.duration_valve_1
#     - group.valve_1_settings

#   valve_1_settings:
#   name: Settings
#   icon: mdi:settings
#   entities:
#     - input_select.valve_1_schedule
#     - input_slider.valve_1_hour
#     - input_slider.valve_1_minutes
#     - input_slider.valve_1_duration

# ##### Switch
#   - platform: mqtt
#   name: "Valve 1"
#   state_topic: "5ccf7f18d3c/valve/1/state"
#   command_topic: "5ccf7f18d3c/valve/1/cmd"
#   payload_on: "1"
#   payload_off: "0"
#   optimistic: false
#   qos: 0
#   retain: true

# ##### Automation
# alias: "Turn on valve based on schedule"
# trigger:
#   platform: template
#   value_template: '{{states.sensor.starttime_valve_1.state == now.time().strftime("%H:%M")}}'

# condition:
#   - condition: state
#   entity_id: switch.valve_1
#   state: 'off'

#   - condition: template
#   value_template: "{{states.sensor.next_run_valve_1.state[5:15] == now.date().strftime('%d-%m-%Y')}}"

# action:
#   - service: script.turn_on
#   entity_id: script.open_valve_1

# #####################
# alias: "Turn on valve"
# trigger:
#   - platform: state
#   entity_id: input_select.valve_1_schedule
#   state: "Run Now"

# action:
#   - service: script.turn_on
#   entity_id: script.open_valve_1

# ################
# alias: "Turn off valve"
# trigger:
#   - platform: state
#   entity_id: input_select.valve_1_schedule
#   state: "None - Close Valve"

# action:
#   - service: script.turn_on
#   entity_id: script.close_valve_1

# #### scripts
#   open_valve_1:
#   alias: "Open Valve 1 for duration below"
#   sequence:
#     - service: script.turn_off
#     data:
#        entity_id: script.close_valve_1_delayed

#     - service: switch.turn_on
#     data:
#       entity_id: switch.valve_1

#     - service: script.turn_on
#     data:
#       entity_id: script.close_valve_1_delayed

# ##############
#   close_valve_1_delayed:
#   alias: "Close Valve 1 after duration"
#   sequence:
#     - delay: '00:{% if states.input_slider.valve_1_duration.state|length < 4%}0{% endif %}{{ states.input_slider.valve_1_duration.state | int }}'

#     - service: switch.turn_off
#     data:
#       entity_id: switch.valve_1

# ################
#   close_valve_1:
#   alias: "Close Valve 1 immediately"
#   sequence:
#     - service: script.turn_off
#     data:
#        entity_id: script.close_valve_1_delayed

#     - service: switch.turn_off
#     data:
#       entity_id: switch.valve_1
